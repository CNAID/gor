

variables:
  JAVA_BUILDER_IMAGE: nextcode/builderimg-java:latest
  #RELEASABLE_BRANCH: master
  #AUTO_DEPLOY_BRANCH: master
  #AUTO_DEPLOY_ENV_REPO: wuxi-nextcode/kube-env/dev/platform-dev-kube-env
  #DOWNSTREAM_KUBE_SUBCHART: sequence-miner
  #DOCKER_HUB_REPO: nextcode/smclient
  #RELEASE_ENV_REPO: wuxi-nextcode/kube-env/customer-kube-env
  GIT_SUBMODULE_STRATEGY: none
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  #GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dskip.documentation=true"
  #AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS: "--build-arg ORG_GRADLE_PROJECT_artifactory_password --build-arg ORG_GRADLE_PROJECT_artifactory_user"
  #AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS: --build-arg ORG_GRADLE_PROJECT_artifactory_password=$ORG_GRADLE_PROJECT_artifactory_password --build-arg ORG_GRADLE_PROJECT_artifactory_user=$ORG_GRADLE_PROJECT_artifactory_user
  #DOCKER_BUILDKIT: 1


stages:
  - build
  - test
  - publish
  - promote
  - release
  - deploy


before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


build:
  stage: build
  image: "$JAVA_BUILDER_IMAGE"
  script: ./gradlew assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
      - "build"
      - "**/build"
      - ".gradle"


.build_cache:
  extends: build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - "build"
      - "**/build"
      - ".gradle"


.test:
  extends: .build_cache
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  artifacts:
    reports:
      junit:
        - "*/*/*/*/TEST-*.xml"
        - "*/*/*/*/*/TEST-*.xml"


unittest:
  extends: .test
  script: ./gradlew test


slowtest:
  extends: .test
  script: ./gradlew slowTest


integrationtest:
  extends: .test
  script: ./gradlew integrationTest


# This codequality block is needed to work around https://gitlab.com/gitlab-org/gitlab/issues/12274
code_quality:
  stage: test
  #only:
  #  - master
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths: [gl-code-quality-report.json]
    expire_in: 1 week


license_management:
  extends: .build_cache
  stage: test
  only:
    - master
  variables:
    # There is no need to run tests or generate sphinx documentation for license management
    # analysis, however, the license management plugin calls the build task so we have to manually
    # disable tests and documentation generation.
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dskip.tests=true -Dskip.documentation=true"
    GIT_SUBMODULE_STRATEGY: none


dependency_scanning:
  stage: test
  # only:
  #  - master
  artifacts:
    paths: [gl-dependency-scanning-report.json]


publish:
  extends: .build_cache
  stage: publish
  #only:
  #  - master
  script: ./gradlew publish -x test -x slowTest -x integrationTest


include:
  - project: wuxi-nextcode/sdev/gitlab-ci-scripts
    file: /auto-ci-workflow.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Security/License-Management.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml

#sast:
#  stage: test
#
##  image: registry.gitlab.com/gitlab-org/gl-sast:latest
##  script:
##    - export SAST_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
##    - docker run
##      --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
##      --env SAST_DISABLE_REMOTE_CHECKS="${SAST_DISABLE_REMOTE_CHECKS:-false}"
##      --volume "$PWD:/code"
##      --volume /var/run/docker.sock:/var/run/docker.sock
##      "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code
##  artifacts:
##    paths: [gl-sast-report.json]
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: pull #pull-push
#    paths:
#      - "build"
#      - "**/build"
#      - ".gradle"